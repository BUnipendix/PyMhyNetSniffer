# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: GCGDuelExtra.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import GCGChallengeData_pb2 as GCGChallengeData__pb2
import PlatformType_pb2 as PlatformType__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x12GCGDuelExtra.proto\x1a\x16GCGChallengeData.proto\x1a\x12PlatformType.proto\"\xa2\x03\n\x0cGCGDuelExtra\x12\x14\n\x0c\x63\x61rd_id_list\x18\x01 \x03(\r\x12\x10\n\x08\x66ield_id\x18\x02 \x01(\r\x12\x14\n\x0c\x63\x61rd_back_id\x18\x03 \x01(\r\x12\x35\n\rcard_face_map\x18\x04 \x03(\x0b\x32\x1e.GCGDuelExtra.CardFaceMapEntry\x12)\n\x0e\x63hallenge_list\x18\x05 \x03(\x0b\x32\x11.GCGChallengeData\x12\r\n\x05score\x18\x06 \x01(\r\x12\x13\n\x0bis_match_ai\x18\x07 \x01(\x08\x12\x12\n\nai_deck_id\x18\x08 \x01(\r\x12\x13\n\x0bis_internal\x18\t \x01(\x08\x12$\n\x1c\x66orbid_finish_challenge_list\x18\n \x03(\r\x12\r\n\x05level\x18\x0b \x01(\r\x12\x16\n\x0e\x63lient_version\x18\x0c \x01(\r\x12$\n\rplatform_type\x18\r \x01(\x0e\x32\r.PlatformType\x1a\x32\n\x10\x43\x61rdFaceMapEntry\x12\x0b\n\x03key\x18\x01 \x01(\r\x12\r\n\x05value\x18\x02 \x01(\r:\x02\x38\x01\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'GCGDuelExtra_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _GCGDUELEXTRA_CARDFACEMAPENTRY._options = None
  _GCGDUELEXTRA_CARDFACEMAPENTRY._serialized_options = b'8\001'
  _GCGDUELEXTRA._serialized_start=67
  _GCGDUELEXTRA._serialized_end=485
  _GCGDUELEXTRA_CARDFACEMAPENTRY._serialized_start=435
  _GCGDUELEXTRA_CARDFACEMAPENTRY._serialized_end=485
# @@protoc_insertion_point(module_scope)
